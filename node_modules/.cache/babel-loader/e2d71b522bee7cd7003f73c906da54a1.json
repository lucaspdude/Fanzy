{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport history from \"../../../services/history\";\nimport api from \"../../../services/api\";\nimport { signInSucess, signFailure, resetSucess, resetFailure } from './actions';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { googleFirebaseSignIn } from \"../../../services/firebase.utils\";\nexport function* signIn({\n  payload\n}) {\n  try {\n    yield put(signInSucess(payload.data));\n    history.push('/dashboard');\n  } catch (error) {\n    yield put(signFailure());\n  }\n}\nexport function* signUp({\n  payload\n}) {\n  try {\n    const {\n      name,\n      email,\n      password\n    } = payload;\n    yield call(api.post, '/users', {\n      name,\n      email,\n      password,\n      provider: true\n    });\n    toast.success('Conta criada com Sucesso, Faça Login');\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha na criação, verifique seus dados');\n    yield put(signFailure());\n  }\n}\nexport function setToken({\n  payload\n}) {\n  if (!payload) return;\n  const {\n    token\n  } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\nexport function signOut() {\n  history.push('/');\n} // Reset password\n\nexport function* resetPassword({\n  payload\n}) {\n  try {\n    const response = yield call(api.post, '/criareset', payload.data);\n    toast.success(response.data.mensagem);\n    yield put(resetSucess(response.data.token));\n  } catch (err) {\n    toast.error(err.response.data.mensagem);\n    yield put(resetFailure());\n  }\n}\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn), takeLatest('@auth/SIGN_UP_REQUEST', signUp), takeLatest('persist/REHYDRATE', setToken), takeLatest('@auth/SIGNOUT', signOut), takeLatest('@auth/RESET_REQUEST', resetPassword)]);","map":{"version":3,"sources":["/home/lucas/Dev/Pessoal/App/src/store/modules/auth/sagas.js"],"names":["all","takeLatest","call","put","toast","history","api","signInSucess","signFailure","resetSucess","resetFailure","firebase","googleFirebaseSignIn","signIn","payload","data","push","error","signUp","name","email","password","post","provider","success","err","setToken","token","auth","defaults","headers","Authorization","signOut","resetPassword","response","mensagem"],"mappings":"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","sourcesContent":["import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport history from '~/services/history';\nimport api from '~/services/api';\nimport { signInSucess, signFailure, resetSucess, resetFailure } from './actions';\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth'\nimport { googleFirebaseSignIn } from '~/services/firebase.utils';\n\n\nexport function* signIn({ payload }) {\n    try {\n        yield put(signInSucess(payload.data))\n        history.push('/dashboard')   \n    } catch (error) {\n        yield put(signFailure())\n    }\n}\n\nexport function* signUp({ payload }) {\n    try {\n        const { name, email, password } = payload;\n        yield call(api.post, '/users', {\n            name,\n            email,\n            password,\n            provider: true,\n        });\n        toast.success('Conta criada com Sucesso, Faça Login');\n        history.push('/');\n    } catch (err) {\n        toast.error('Falha na criação, verifique seus dados');\n        yield put(signFailure());\n    }\n}\n\nexport function setToken({ payload }) {\n    if (!payload) return;\n\n    const { token } = payload.auth;\n\n    if (token) {\n        api.defaults.headers.Authorization = `Bearer ${token}`;\n    }\n}\n\nexport function signOut() {\n    history.push('/');\n}\n\n\n\n\n// Reset password\n\nexport function* resetPassword({ payload }) {\n    try {\n        const response = yield call(api.post, '/criareset', payload.data)\n        toast.success(response.data.mensagem)\n        yield put(resetSucess(response.data.token))\n    } catch (err) {\n        toast.error(err.response.data.mensagem);\n        yield put(resetFailure());\n\n    }\n}\n\nexport default all([\n    takeLatest('@auth/SIGN_IN_REQUEST', signIn),\n    takeLatest('@auth/SIGN_UP_REQUEST', signUp),\n    takeLatest('persist/REHYDRATE', setToken),\n    takeLatest('@auth/SIGNOUT', signOut),\n    takeLatest('@auth/RESET_REQUEST', resetPassword),\n]);\n"]},"metadata":{},"sourceType":"module"}